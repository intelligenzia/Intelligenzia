{"version":3,"sources":["webpack:///./src/pages/category.js","webpack:///./src/components/List/List.js","webpack:///./src/components/List/index.js"],"names":["CategoryPage","props","data","posts","edges","facebook","site","siteMetadata","categories","forEach","edge","category","node","frontmatter","push","categoryList","key","Fragment","Consumer","theme","color","brand","primary","title","map","item","query","List","space","stack","m","xs","font","size","s","lineHeight","l","slug","fields","to"],"mappings":"gOAkFeA,UAxEM,SAAAC,GAAU,IAAD,EAQxBA,EANFC,KACkBC,EAHQ,EAGxBA,MAASC,MAESC,EALM,EAIxBC,KACEC,aAAgBF,SAMhBG,EAAa,GACnBL,EAAMM,SAAQ,SAAAC,GAAS,IAGFC,EAEfD,EAHFE,KACEC,YAAeF,SAIfA,GAAwB,MAAZA,IACTH,EAAWG,KACdH,EAAWG,GAAY,IAEzBH,EAAWG,GAAUG,KAAKJ,OAI9B,IAAMK,EAAe,GAErB,IAAK,IAAIC,KAAOR,EACdO,EAAaD,KAAK,CAACE,EAAKR,EAAWQ,KAGrC,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,eAAaC,SAAd,MACG,SAAAC,GAAK,OACJ,kBAAC,IAAD,CAASA,MAAOA,GACd,kEAkBYA,EAAMC,MAAMC,MAAMC,aAjB5B,kBAAC,IAAD,CAAUC,MAAM,sBAAsBJ,MAAOA,KAE9CJ,EAAaS,KAAI,SAAAC,GAAI,OACpB,6BAAST,IAAKS,EAAK,GAAnB,sCAcUN,EAAMC,MAAMC,MAAMC,aAb1B,8DAaQH,EAAMC,MAAMC,MAAMC,aAZxB,kBAAC,IAAD,MADF,IACaG,EAAK,IAElB,kBAAC,IAAD,CAAMrB,MAAOqB,EAAK,GAAIN,MAAOA,QATnC,+JAmBcA,EAAMC,MAAMC,MAAMC,QAnBhC,eAmBcH,EAAMC,MAAMC,MAAMC,eAOpC,kBAAC,IAAD,CAAKjB,SAAUA,MAYd,IAAMqB,EAAK,c,6ECrCHC,EA5CF,SAAA1B,GAAU,IACbG,EAAiBH,EAAjBG,MAAOe,EAAUlB,EAAVkB,MAEf,OACE,kBAAC,IAAMF,SAAP,KACE,6DAoBcE,EAAMS,MAAMC,MAAMC,EACjBX,EAAMS,MAAME,EAIZX,EAAMS,MAAMG,GACVZ,EAAMa,KAAKC,KAAKC,EACdf,EAAMa,KAAKG,WAAWC,OA1BtChC,EAAMoB,KAAI,SAAAd,GAAS,IAAD,EAMbA,EAJFE,KACiBW,EAHF,EAGbV,YAAeU,MACLc,EAJG,EAIbC,OAAUD,KAId,OACE,wBAAIrB,IAAKqB,EAAT,qCAUQlB,EAAMS,MAAMC,MAAMC,EACjBX,EAAMS,MAAME,EAIZX,EAAMS,MAAMG,GACVZ,EAAMa,KAAKC,KAAKC,EACdf,EAAMa,KAAKG,WAAWC,OAhBjC,kBAAC,OAAD,CAAMG,GAAIF,GAAOd,QAZ3B,0FAqBgBJ,EAAMS,MAAMC,MAAMC,EArBlC,YAsBiBX,EAAMS,MAAME,EAtB7B,kEA0BiBX,EAAMS,MAAMG,GA1B7B,gBA2BmBZ,EAAMa,KAAKC,KAAKC,EA3BnC,gBA4BqBf,EAAMa,KAAKG,WAAWC,EA5B3C,eAqBgBjB,EAAMS,MAAMC,MAAMC,EACjBX,EAAMS,MAAME,EAIZX,EAAMS,MAAMG,GACVZ,EAAMa,KAAKC,KAAKC,EACdf,EAAMa,KAAKG,WAAWC,OCpC/C","file":"component---src-pages-category-js-78a8171d0c2767eb23ef.js","sourcesContent":["import { FaTag } from \"react-icons/fa/\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { ThemeContext } from \"../layouts\";\nimport Article from \"../components/Article/\";\nimport Headline from \"../components/Article/Headline\";\nimport List from \"../components/List\";\nimport Seo from \"../components/Seo\";\n\nconst CategoryPage = props => {\n  const {\n    data: {\n      posts: { edges: posts },\n      site: {\n        siteMetadata: { facebook }\n      }\n    }\n  } = props;\n\n  // Create category list\n  const categories = {};\n  posts.forEach(edge => {\n    const {\n      node: {\n        frontmatter: { category }\n      }\n    } = edge;\n\n    if (category && category != null) {\n      if (!categories[category]) {\n        categories[category] = [];\n      }\n      categories[category].push(edge);\n    }\n  });\n\n  const categoryList = [];\n\n  for (var key in categories) {\n    categoryList.push([key, categories[key]]);\n  }\n\n  return (\n    <React.Fragment>\n      <ThemeContext.Consumer>\n        {theme => (\n          <Article theme={theme}>\n            <header>\n              <Headline title=\"Posts by categories\" theme={theme} />\n            </header>\n            {categoryList.map(item => (\n              <section key={item[0]}>\n                <h2>\n                  <FaTag /> {item[0]}\n                </h2>\n                <List edges={item[1]} theme={theme} />\n              </section>\n            ))}\n            {/* --- STYLES --- */}\n            <style jsx>{`\n              h2 {\n                margin: 0 0 0.5em;\n              }\n              h2 :global(svg) {\n                height: 0.8em;\n                fill: ${theme.color.brand.primary};\n              }\n            `}</style>\n          </Article>\n        )}\n      </ThemeContext.Consumer>\n\n      <Seo facebook={facebook} />\n    </React.Fragment>\n  );\n};\n\nCategoryPage.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nexport default CategoryPage;\n\n//eslint-disable-next-line no-undef\nexport const query = graphql`\n  query PostsQuery {\n    posts: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"//posts/[0-9]+.*--/\" } }\n      sort: { fields: [fields___prefix], order: DESC }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n            prefix\n          }\n          frontmatter {\n            title\n            category\n            author\n            cover {\n              children {\n                ... on ImageSharp {\n                  fluid(maxWidth: 800, maxHeight: 360) {\n                    ...GatsbyImageSharpFluid_withWebp\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        facebook {\n          appId\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\";\n\nconst List = props => {\n  const { edges, theme } = props;\n\n  return (\n    <React.Fragment>\n      <ul>\n        {edges.map(edge => {\n          const {\n            node: {\n              frontmatter: { title },\n              fields: { slug }\n            }\n          } = edge;\n\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          );\n        })}\n      </ul>\n\n      {/* --- STYLES --- */}\n      <style jsx>{`\n        ul {\n          margin: ${theme.space.stack.m};\n          padding: ${theme.space.m};\n          list-style: circle;\n        }\n        li {\n          padding: ${theme.space.xs} 0;\n          font-size: ${theme.font.size.s};\n          line-height: ${theme.font.lineHeight.l};\n        }\n      `}</style>\n    </React.Fragment>\n  );\n};\n\nList.propTypes = {\n  edges: PropTypes.array.isRequired,\n  theme: PropTypes.object.isRequired\n};\n\nexport default List;\n","export { default } from \"./List\";\n"],"sourceRoot":""}